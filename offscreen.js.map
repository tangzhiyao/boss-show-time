{"version":3,"file":"offscreen.js","mappings":"uBACIA,EAAsB,CAG1BA,E,GCHAA,EAAyBC,GAEZA,EAAU,MCHvBD,EAAwB,CAACE,EAAKC,IAAUC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,GCAlFH,EAAwB,MCAxBA,EAAoBQ,EAAIC,SAASC,SAAWC,KAAKC,SAASC,KCAnD,MACMC,EAAa,aACbC,EAAY,YACZC,EAAa,aCC1B,MAAMC,EAAS,IAAIC,OAAO,IAAIC,IAAI,kBAAiC,CACjEC,UAAM,IAGRH,EAAOI,UAAY,SAAUC,GAC3B,IAAIC,EAAUD,EAAME,KAAKA,KACrBD,GACEA,EAAQE,MAAQT,GAAcO,EAAQG,IAAMX,IAG1CQ,EAAQE,KAERF,EAAQG,GAERH,EAAQI,OAERJ,EAAQK,WAERL,EAAQM,MAGZN,EAAQE,KAAOV,EACfQ,EAAQG,GAAKZ,EAGTS,EAAQE,KAERF,EAAQG,GAERH,EAAQI,OAERJ,EAAQK,WAERL,EAAQM,MAGZC,OAAOC,QAAQC,YAAYT,GAGjC,EAEAO,OAAOC,QAAQE,UAAUC,aAAY,CAACX,EAASY,EAAQC,KACjDb,GACEA,EAAQE,MAAQX,GAAcS,EAAQG,IAAMX,IAG1CQ,EAAQE,KAERF,EAAQG,GAERH,EAAQI,OAERJ,EAAQK,WAERL,EAAQM,MAGZN,EAAQE,KAAOV,EACfQ,EAAQG,GAAKV,EAGTO,EAAQE,KAERF,EAAQG,GAERH,EAAQI,OAERJ,EAAQK,WAERL,EAAQM,MAGZZ,EAAOoB,YAAYd,GAEvB,G","sources":["webpack://boss-show-time/webpack/bootstrap","webpack://boss-show-time/webpack/runtime/get javascript chunk filename","webpack://boss-show-time/webpack/runtime/hasOwnProperty shorthand","webpack://boss-show-time/webpack/runtime/publicPath","webpack://boss-show-time/webpack/runtime/jsonp chunk loading","webpack://boss-show-time/./src/api/bridgeCommon.js","webpack://boss-show-time/./src/offscreen/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"./\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t522: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","export const CONTENT_SCRIPT = \"CONTENT_SCRIPT\";\nexport const BACKGROUND = \"BACKGROUND\";\nexport const OFFSCREEN = \"OFFSCREEN\";\nexport const WEB_WORKER = \"WEB_WORKER\";\n","import { BACKGROUND, OFFSCREEN, WEB_WORKER } from \"../api/bridgeCommon\";\nimport { debugLog } from \"../log\";\ndebugLog(\"offscreen ready\");\n\nconst worker = new Worker(new URL(\"./worker.js\", import.meta.url), {\n  type: \"module\",\n});\n\nworker.onmessage = function (event) {\n  let message = event.data.data;\n  if (message) {\n    if (message.from == WEB_WORKER && message.to == OFFSCREEN) {\n      debugLog(\n        \"8.[offscreen][receive][\" +\n          message.from +\n          \" -> \" +\n          message.to +\n          \"] message [action=\" +\n          message.action +\n          \",callbackId=\" +\n          message.callbackId +\n          \",error=\" +\n          message.error +\n          \"]\"\n      );\n      message.from = OFFSCREEN;\n      message.to = BACKGROUND;\n      debugLog(\n        \"9.[offscreen][send][\" +\n          message.from +\n          \" -> \" +\n          message.to +\n          \"] message [action=\" +\n          message.action +\n          \",callbackId=\" +\n          message.callbackId +\n          \",error=\" +\n          message.error +\n          \"]\"\n      );\n      chrome.runtime.sendMessage(message);\n    }\n  }\n};\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message) {\n    if (message.from == BACKGROUND && message.to == OFFSCREEN) {\n      debugLog(\n        \"4.[offscreen][receive][\" +\n          message.from +\n          \" -> \" +\n          message.to +\n          \"] message [action=\" +\n          message.action +\n          \",callbackId=\" +\n          message.callbackId +\n          \",error=\" +\n          message.error +\n          \"]\"\n      );\n      message.from = OFFSCREEN;\n      message.to = WEB_WORKER;\n      debugLog(\n        \"5.[offscreen][send][\" +\n          message.from +\n          \" -> \" +\n          message.to +\n          \"] message [action=\" +\n          message.action +\n          \",callbackId=\" +\n          message.callbackId +\n          \",error=\" +\n          message.error +\n          \"]\"\n      );\n      worker.postMessage(message);\n    }\n  }\n});\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","document","baseURI","self","location","href","BACKGROUND","OFFSCREEN","WEB_WORKER","worker","Worker","URL","type","onmessage","event","message","data","from","to","action","callbackId","error","chrome","runtime","sendMessage","onMessage","addListener","sender","sendResponse","postMessage"],"sourceRoot":""}